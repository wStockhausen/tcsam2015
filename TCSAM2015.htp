#if !defined(_TCSAM2015_)
#  define _TCSAM2015_

class model_data : public ad_comm{
  int nZBs;
  int mnYr;
  int mxYr;
  int mxYrp1;
  int nSel;
  int nFsh;
  int nSrv;
  dvector zBs;
  ivector mapD2MFsh;
  ivector mapM2DFsh;
  ivector mapD2MSrv;
  ivector mapM2DSrv;
  int npLnR;
  ivector phsLnR;
  dvector lbLnR;
  dvector ubLnR;
  int npLnRCV;
  ivector phsLnRCV;
  dvector lbLnRCV;
  dvector ubLnRCV;
  int npLgtRX;
  ivector phsLgtRX;
  dvector lbLgtRX;
  dvector ubLgtRX;
  int npLnRa;
  ivector phsLnRa;
  dvector lbLnRa;
  dvector ubLnRa;
  int npLnRb;
  ivector phsLnRb;
  dvector lbLnRb;
  dvector ubLnRb;
  int npDevsLnR;
  ivector mniDevsLnR;
  ivector mxiDevsLnR;
  imatrix idxsDevsLnR;
  dvector lbDevsLnR;
  dvector ubDevsLnR;
  ivector phsDevsLnR;
  int npLnM;
  ivector phsLnM;
  dvector lbLnM;
  dvector ubLnM;
  int npLnDMT;
  ivector phsLnDMT;
  dvector lbLnDMT;
  dvector ubLnDMT;
  int npLnDMX;
  ivector phsLnDMX;
  dvector lbLnDMX;
  dvector ubLnDMX;
  int npLnDMM;
  ivector phsLnDMM;
  dvector lbLnDMM;
  dvector ubLnDMM;
  int npLnDMXM;
  ivector phsLnDMXM;
  dvector lbLnDMXM;
  dvector ubLnDMXM;
  double zMref;
  int npLgtPrMat;
  ivector mniLgtPrMat;
  ivector mxiLgtPrMat;
  imatrix idxsLgtPrMat;
  dvector lbLgtPrMat;
  dvector ubLgtPrMat;
  ivector phsLgtPrMat;
  int npLnGrA;
  ivector phsLnGrA;
  dvector lbLnGrA;
  dvector ubLnGrA;
  int npLnGrB;
  ivector phsLnGrB;
  dvector lbLnGrB;
  dvector ubLnGrB;
  int npLnGrBeta;
  ivector phsLnGrBeta;
  dvector lbLnGrBeta;
  dvector ubLnGrBeta;
  int npS1;
  ivector phsS1;
  dvector lbS1;
  dvector ubS1;
  int npS2;
  ivector phsS2;
  dvector lbS2;
  dvector ubS2;
  int npS3;
  ivector phsS3;
  dvector lbS3;
  dvector ubS3;
  int npS4;
  ivector phsS4;
  dvector lbS4;
  dvector ubS4;
  int npS5;
  ivector phsS5;
  dvector lbS5;
  dvector ubS5;
  int npS6;
  ivector phsS6;
  dvector lbS6;
  dvector ubS6;
  int npDevsS1;
  ivector mniDevsS1;
  ivector mxiDevsS1;
  imatrix idxsDevsS1;
  dvector lbDevsS1;
  dvector ubDevsS1;
  ivector phsDevsS1;
  int npDevsS2;
  ivector mniDevsS2;
  ivector mxiDevsS2;
  imatrix idxsDevsS2;
  dvector lbDevsS2;
  dvector ubDevsS2;
  ivector phsDevsS2;
  int npDevsS3;
  ivector mniDevsS3;
  ivector mxiDevsS3;
  imatrix idxsDevsS3;
  dvector lbDevsS3;
  dvector ubDevsS3;
  ivector phsDevsS3;
  int npDevsS4;
  ivector mniDevsS4;
  ivector mxiDevsS4;
  imatrix idxsDevsS4;
  dvector lbDevsS4;
  dvector ubDevsS4;
  ivector phsDevsS4;
  int npDevsS5;
  ivector mniDevsS5;
  ivector mxiDevsS5;
  imatrix idxsDevsS5;
  dvector lbDevsS5;
  dvector ubDevsS5;
  ivector phsDevsS5;
  int npDevsS6;
  ivector mniDevsS6;
  ivector mxiDevsS6;
  imatrix idxsDevsS6;
  dvector lbDevsS6;
  dvector ubDevsS6;
  ivector phsDevsS6;
  int npHM;
  ivector phsHM;
  dvector lbHM;
  dvector ubHM;
  int npLnC;
  ivector phsLnC;
  dvector lbLnC;
  dvector ubLnC;
  int npLnDCT;
  ivector phsLnDCT;
  dvector lbLnDCT;
  dvector ubLnDCT;
  int npLnDCX;
  ivector phsLnDCX;
  dvector lbLnDCX;
  dvector ubLnDCX;
  int npLnDCM;
  ivector phsLnDCM;
  dvector lbLnDCM;
  dvector ubLnDCM;
  int npLnDCXM;
  ivector phsLnDCXM;
  dvector lbLnDCXM;
  dvector ubLnDCXM;
  int npDevsLnC;
  ivector mniDevsLnC;
  ivector mxiDevsLnC;
  imatrix idxsDevsLnC;
  dvector lbDevsLnC;
  dvector ubDevsLnC;
  ivector phsDevsLnC;
  int npLnQ;
  ivector phsLnQ;
  dvector lbLnQ;
  dvector ubLnQ;
  int npLnDQT;
  ivector phsLnDQT;
  dvector lbLnDQT;
  dvector ubLnDQT;
  int npLnDQX;
  ivector phsLnDQX;
  dvector lbLnDQX;
  dvector ubLnDQX;
  int npLnDQM;
  ivector phsLnDQM;
  dvector lbLnDQM;
  dvector ubLnDQM;
  int npLnDQXM;
  ivector phsLnDQXM;
  dvector lbLnDQXM;
  dvector ubLnDQXM;
  dvector dtF;
  dvector dtM;
  ivector optsFcAvg;
  dvector avgEff;
  int npcRec;
  int npcNM;
  int npcMat;
  int npcGr;
  int npcSel;
  int npcFsh;
  int npcSrv;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector pLnR;
  param_init_bounded_number_vector pLnRCV;
  param_init_bounded_number_vector pLgtRX;
  param_init_bounded_number_vector pLnRa;
  param_init_bounded_number_vector pLnRb;
  param_init_bounded_vector_vector pDevsLnR;
  param_matrix devsLnR;
  param_init_bounded_number_vector pLnM;
  param_init_bounded_number_vector pLnDMT;
  param_init_bounded_number_vector pLnDMX;
  param_init_bounded_number_vector pLnDMM;
  param_init_bounded_number_vector pLnDMXM;
  param_init_bounded_number_vector pLnGrA;
  param_init_bounded_number_vector pLnGrB;
  param_init_bounded_number_vector pLnGrBeta;
  param_init_bounded_vector_vector pLgtPrMat;
  param_init_bounded_number_vector pS1;
  param_init_bounded_number_vector pS2;
  param_init_bounded_number_vector pS3;
  param_init_bounded_number_vector pS4;
  param_init_bounded_number_vector pS5;
  param_init_bounded_number_vector pS6;
  param_init_bounded_vector_vector pDevsS1;
  param_init_bounded_vector_vector pDevsS2;
  param_init_bounded_vector_vector pDevsS3;
  param_init_bounded_vector_vector pDevsS4;
  param_init_bounded_vector_vector pDevsS5;
  param_init_bounded_vector_vector pDevsS6;
  param_matrix devsS1;
  param_matrix devsS2;
  param_matrix devsS3;
  param_matrix devsS4;
  param_matrix devsS5;
  param_matrix devsS6;
  param_init_bounded_number_vector pHM;
  param_init_bounded_number_vector pLnC;
  param_init_bounded_number_vector pLnDCT;
  param_init_bounded_number_vector pLnDCX;
  param_init_bounded_number_vector pLnDCM;
  param_init_bounded_number_vector pLnDCXM;
  param_init_bounded_vector_vector pDevsLnC;
  param_matrix devsLnC;
  param_init_bounded_number_vector pLnQ;
  param_init_bounded_number_vector pLnDQT;
  param_init_bounded_number_vector pLnDQX;
  param_init_bounded_number_vector pLnDQM;
  param_init_bounded_number_vector pLnDQXM;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value objFun;
  param_matrix spb_yx;
  param_5array n_yxmsz;
  param_5array nmN_yxmsz;
  param_5array tmN_yxmsz;
  param_vector R_y;
  param_vector Rx_c;
  param_matrix R_yx;
  param_matrix R_cz;
  param_matrix R_yz;
  param_matrix stdvDevsLnR_cy;
  param_matrix zscrDevsLnR_cy;
  param_3array M_cxm;
  param_4array M_yxmz;
  param_matrix prMat_cz;
  param_3array prMat_yxz;
  param_3array prGr_czz;
  param_5array prGr_yxmzz;
  param_matrix sel_cz;
  param_3array sel_iyz;
  param_4array avgFc;
  param_4array avgRatioFc2Eff;
  param_matrix Fhm_fy;
  param_5array cF_fyxms;
  param_6array cF_fyxmsz;
  param_6array rmF_fyxmsz;
  param_6array dmF_fyxmsz;
  param_5array tmF_yxmsz;
  param_6array cN_fyxmsz;
  param_6array dN_fyxmsz;
  param_6array rmN_fyxmsz;
  param_6array dmN_fyxmsz;
  param_3array spb_vyx;
  param_5array q_vyxms;
  param_6array q_vyxmsz;
  param_6array n_vyxmsz;
  param_vector fPenRecDevs;
  param_vector fPenSmoothLgtPrMat;
  param_vector fPenNonDecLgtPrMat;
  param_vector fPenDevsS1;
  param_vector fPenDevsS2;
  param_vector fPenDevsS3;
  param_vector fPenDevsS4;
  param_vector fPenDevsS5;
  param_vector fPenDevsS6;
  param_vector fPenDevsLnC;
  param_vector nllRecDevs;
  param_stddev_vector sdrLnR_y;
  param_stddev_matrix sdrSpB_xy;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void writeMCMCHeader(void);
 void writeMCMCtoR(ostream& mcmc,NumberVectorInfo* ptr);
 void writeMCMCtoR(ostream& mcmc,BoundedNumberVectorInfo* ptr);
 void writeMCMCtoR(ostream& mcmc,BoundedVectorVectorInfo* ptr);
 void writeMCMCtoR(ostream& mcmc,DevsVectorVectorInfo* ptr);
 void writeMCMCtoR(ofstream& mcmc);
 void createSimData(int debug, ostream& cout, int iSimDataSeed, ModelDatasets* ptrSim);
 void writeSimData(ostream& os, int debug, ostream& cout, ModelDatasets* ptrSim);
 void setInitVals(BoundedNumberVectorInfo* pI, param_init_bounded_number_vector& p, int debug, ostream& cout);
 void setInitVals(BoundedVectorVectorInfo* pI, param_init_bounded_vector_vector& p, int debug, ostream& cout);
 void setInitVals(DevsVectorVectorInfo* pI, param_init_bounded_vector_vector& p, int debug, ostream& cout);
 void setAllDevs(int debug, ostream& cout);
 void runPopDyMod(int debug, ostream& cout);
 void initPopDyMod(int debug, ostream& cout);
 void doSurveys(int y,int debug,ostream& cout);
 void runPopDyModOneYear(int yr, int debug, ostream& cout);
 dvar_vector calcSpB(dvar4_array& n0_xmsz, int y, int debug, ostream& cout);
 dvar4_array applyNatMort(dvar4_array& n0_xmsz, int y, double dt, int debug, ostream& cout);
 dvar4_array applyFshMort(dvar4_array& n0_xmsz, int y, int debug, ostream& cout);
 dvar4_array applyMGM(dvar4_array& n0_xmsz, int y, int debug, ostream& cout);
 void calcRecruitment(int debug, ostream& cout);
 void calcNatMort(int debug, ostream& cout);
 void calcMaturity(int debug, ostream& cout);
 void calcGrowth(int debug, ostream& cout);
 void calcSelectivities(int debug, ostream& cout);
 void calcFisheryFs(int debug, ostream& cout);
 void calcSurveyQs(int debug, ostream& cout);
 void calcPenalties(int debug, ostream& cout);
 dvar_vector calc1stDiffs(const dvar_vector& d);
 dvar_vector calc2ndDiffs(const dvar_vector& d);
 void calcNLLs_Recruitment(int debug, ostream& cout);
 void calcObjFun(int debug, ostream& cout);
 dvariable calcNorm2NLL(dvar_vector& mod, dvector& obs, dvector& stdv, ivector& yrs, int debug, ostream& cout);
 dvariable calcNormalNLL(dvar_vector& mod, dvector& obs, dvector& stdv, ivector& yrs, int debug, ostream& cout);
 dvariable calcLognormalNLL(dvar_vector& mod, dvector& obs, dvector& stdv, ivector& yrs, int debug, ostream& cout);
 dvar_vector calcNLLs_CatchAbundance(AggregateCatchData* ptrA, dvar5_array& mA_yxmsz, int debug, ostream& cout);
 dvar_vector calcNLLs_CatchBiomass(AggregateCatchData* ptrB, dvar5_array& mA_yxmsz, int debug, ostream& cout);
 dvariable calcMultinomialNLL(dvar_vector& mod, dvector& obs, double& ss, int debug, ostream& cout);
 dvariable calcNLL(int llType, dvar_vector& mod, dvector& obs, dvector& stdv, ivector& yrs, int debug, ostream& cout);
 dvariable calcNLL(int llType, dvar_vector& mod, dvector& obs, double& ss, int debug, ostream& cout);
 dvar_matrix calcNLLs_CatchNatZ(SizeFrequencyData* ptrZFD, dvar5_array& mA_yxmsz, int debug, ostream& cout);
 void calcNLLs_Fisheries(int debug, ostream& cout);
 void calcNLLs_Surveys(int debug, ostream& cout);
 void calcAllPriors(int debug, ostream& cout);
 void ReportToR_Data(ostream& os, int debug, ostream& cout);
 void ReportToR_Params(ostream& os, int debug, ostream& cout);
 void ReportToR_PopQuants(ostream& os, int debug, ostream& cout);
 void ReportToR_SelFuncs(ostream& os, int debug, ostream& cout);
 void ReportToR_FshQuants(ostream& os, int debug, ostream& cout);
 void ReportToR_SrvQuants(ostream& os, int debug, ostream& cout);
 void ReportToR_ModelFits(ostream& os, int debug, ostream& cout);
 void updateMPI(int debug, ostream& cout);
 void ReportToR(ostream& os, int debug, ostream& cout);
  void between_phases_calculations(void);

};
#endif
